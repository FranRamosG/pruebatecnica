terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "4.51.0"
    }
  }
}

provider "google" {
  credentials = file(var.credentials_file)

  project = var.project
  region  = var.region
  zone    = var.zone
}

#Red virtual
resource "google_compute_network" "vpc_network" {
  name = "red-local-pt"
}

#Instancia de la aplicación
resource "google_compute_instance" "app_instance" {
  name = "app-instance"
  machine_type = "n2-standard-2"
  zone = var.zone

  tags = ["app"]

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
      labels = {
        my_label = "value"
      }
    }
  }

  network_interface {
    network = "default"
    access_config {
    }
  }
}

/*#Instancia Balanceador
resource "google_compute_instance" "bal_instance" {
  name = "bal-instance"
  machine_type = "n2-standard-2"   
  zone = var.zone 

  tags = ["bal"]

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
      labels = {
        my_label = "value"
      }
    }
  }

  network_interface {
    network = "default"
    access_config {
    }
  }
}*/

#Crear el balanceador de carga
resource "google_compute_backend_service" "app_backend_service" {
  name = "app-backend-service"
  protocol = "HTTP"
  timeout_sec = 60
  health_checks = [google_compute_http_health_check.http_check.id]

  backend {
    group = google_compute_instance_group.app_instance_group.self_link
  }
}

resource "google_compute_http_health_check" "http_check" {
  name               = "health-check"
  request_path       = "/"
  check_interval_sec = 1
  timeout_sec        = 1
}

#Crear la instancia de grupo
resource "google_compute_instance_group" "app_instance_group" {
  name = "app-instance-group"
  zone = var.zone

  instances = [google_compute_instance.app_instance.self_link]
}

#Crear la regla de renvio
resource "google_compute_forwarding_rule" "app_forwarding_rule" {
  name = "app-forwarding-rule"
  region = var.region
  ip_protocol = "TCP"
  port_range = "80"

  #target = google_compute_backend_service.app_backend_service.self_link
  #target = google_compute_backend_service.app_backend_service.id
  backend_service = google_compute_backend_service.app_backend_service.id
}

#Configurar la regla de firewall para permitir solo el tráfico desde el balanceador
resource "google_compute_firewall" "app_firewall" {
  name = "app-firewall"
  network = "default"

  allow {
    protocol = "tcp"
    ports = ["80"]
  }  

  source_ranges = [google_compute_forwarding_rule.app_forwarding_rule.ip_address]
}

/*output "app_ip_address" {
  value = google_compute_instance.app_instance.network_interface.0.access_config.0.assigned_nat_ip
}*/

/*#Pool para el balanceador
resource "google_compute_target_pool" "app_target_pool" {
  name = "app-target-pool"

  instances = [
    "us-central1-c/bal-instnace",
    "us-central1-c/app-instance",
  ]

  health_checks = [
    google_compute_http_health_check.app_health_check.name,
  ]

  session_affinity = "GENERATED"
}

resource "google_compute_http_health_check" "app_health_check" {
  name = "app-health-check"
  request_path = "/"
  check_interval_sec = 1
  timeout_sec = 1
}*/

/*#Restricción de Acceso a la Instancia de Aplicación
resource "google_compute_firewall" "allow-lb-access" {
  name    = "allow-lb-access"
  network = google_compute_network.vpc_network.name

  allow {
    protocol = "tcp"
    ports    = ["80", "443"]
  }

  source_ranges = ["0.0.0.0/0"]  # Permite el acceso desde cualquier dirección (temporal)
  target_tags   = ["allow-desktop-access"]
}
#Securización del puerto SSH
resource "google_compute_firewall" "allow-ssh" {
  name    = "allow-ssh"
  network = google_compute_network.vpc_network.name

  allow {
    protocol = "tcp"
    ports    = ["22"]
  }

  source_ranges = ["34.41.171.202/32"]  # Reemplaza con tu dirección IP externa
  target_tags   = ["allow-desktop-access"]
}*/


/*Configuración Balanceador
resource "google_compute_backend_service" "app_backend_service" {
  name        = "app-backend-service"
  protocol    = "HTTP"
  timeout_sec = 60

  health_checks = [google_compute_http_health_check.app_health_check.id]
}

resource "google_compute_url_map" "app_url_map" {
  name            = "app-url-map"
  default_service = google_compute_backend_service.app_backend_service.self_link
 
}

resource "google_compute_global_forwarding_rule" "app_forwarding_rule" {
  name       = "app-forwarding-rule"
  target     = google_compute_url_map.app_url_map.self_link
  port_range = "80"
}*/
